#!groovy

// This "basic pipeline" runs quick tests:
// * builds a tarball as usual
// * uses that tarball for
//   + running Unix checks
//   + building with MSVC on Windows
//
// The GIT checkout must use the remote branch name as the checkout local
// branch name so that tarball names contain the branch name.
// In "Additional Behaviours", enable "Checkout to specific local branch"
// and leave "Branch name" empty.
// Not needed for multi-branch pipelines which already BRANCH_NAME in the environment.
import hudson.model.*

def gitBranch = ""
def tarballgz
def tarballbz2
def statusHasChanged = false
def filterAvailableNode(nodeList) {
  def nodeToDelete = []
  nodeList.each { node ->
    echo "Searching for $node";
    if (node != null) { 
      computer = Jenkins.instance.getNode(node).toComputer();
      if (computer.isOffline()) {
        echo "Error: $node is offline.";
        nodeToDelete.add(node);
      }
    }
    else {
      echo "Error: $node not found!";
      nodeToDelete.add(node);
    }
  }

  return nodeList.findAll { !nodeToDelete.contains(it) }
}

pipeline {
	agent none

	stages {
		stage('Tarball') {
			steps {
				node('autotools') {
					checkout scm
					script {
						gitBranch = sh (script: 'if test "$BRANCH_NAME"; then echo $BRANCH_NAME; else git rev-parse --abbrev-ref HEAD; fi', returnStdout: true).trim()
					}
					sh 'contrib/ci.inria.fr/job-0-tarball.sh '+gitBranch
					script {
					       tarballgz = sh (script: 'ls *.gz', returnStdout: true).trim()
					       tarballbz2 = sh (script: 'ls *.bz2', returnStdout: true).trim()
					}
					stash includes: tarballgz, name: 'tarballgz'
					// Stash those scripts because they are not in make dist
					dir('contrib/ci.inria.fr') {
						stash includes: "job-1-check.sh", name: 'script-unix-check'
						stash includes: "job-1-visualstudio.bat", name: 'script-msvc'
            stash includes: "job-3-pci.sh", name: 'script-pci'
					}
					archiveArtifacts artifacts: tarballgz+","+tarballbz2+",doc/doxygen-doc/hwloc-a4.pdf", fingerprint: true, onlyIfSuccessful: true
					deleteDir()
				}
			}
		}
		stage('Check') {
			steps {
				script {
					listOfNodeNames = []
					if (env.NO_UNIX != 'true') {
						labelToSelect = 'unix'
            
						/*listOfNodeNames = jenkins.model.Jenkins.instance.nodes.collect {
						  node -> node.getLabelString().contains(labelToSelect) ? node.name : null
						}
						listOfNodeNames.removeAll(Collections.singleton(null))
            listOfNodeNames = filterAvailableNode(listOfNodeNames)*/
            echo "------------- TESTING --------------------"
            listOfNodeNames = nodesByLabel(labelToSelect)
            println listOfNodeNames
					}
					if (env.NO_MSVC != 'true') {
						listOfNodeNames.push('VisualStudio')
					}
          if (env.PCI == 'true') {
            node(listOfNodeNames[0]) {
              dir('check-pci') {
                    unstash 'tarballgz'
                    unstash 'script-pci'
                    sh 'chmod 755 job-3-pci.sh && ./job-3-pci.sh '+tarballgz
                    if (env.KEEP_WORKING_DIRECTORY != 'true')
                      deleteDir()
                  }
            }
          }
					def p = listOfNodeNames.collectEntries {
					[ (it): {
						if (it != 'VisualStudio') {
							node(it) {
								dir('check-unix') {
									unstash 'tarballgz'
									unstash 'script-unix-check'
									sh 'chmod 755 job-1-check.sh && ./job-1-check.sh '+tarballgz
									if (env.KEEP_WORKING_DIRECTORY != 'true')
										deleteDir()
								}
							}
						} else {
							node('msvc') {
								dir('check-msvc') {
									unstash 'tarballgz'
									unstash 'script-msvc'
									bat 'job-1-visualstudio.bat '+tarballgz
									if (env.KEEP_WORKING_DIRECTORY != 'true')
										deleteDir()
								}
							}
						}
					}]}
					parallel p;
				}
			}
		}
	}

	post {
		// hooks are called in order: always, changed, aborted, failure, success, unstable
		changed {
			echo "Build status has changed."
			script {
				statusHasChanged = true
			}
		}
		success {
			echo "Build success."
			// email when changed to success
			script {
				if (statusHasChanged || env.EMAIL_NOTIFICATION == 'true') {
					emailext(body: '${DEFAULT_CONTENT}',
						 subject: '${DEFAULT_SUBJECT}',
						 replyTo: '$DEFAULT_REPLYTO',
						 to: '$DEFAULT_RECIPIENTS',
						 recipientProviders: [[$class: 'CulpritsRecipientProvider'],[$class: 'RequesterRecipientProvider']])
				}
			}
		}
		failure {
			echo "Build failure."
			// always email on failure
			emailext(body: '${DEFAULT_CONTENT}',
				 subject: '${DEFAULT_SUBJECT}',
				 replyTo: '$DEFAULT_REPLYTO',
				 to: '$DEFAULT_RECIPIENTS',
				 recipientProviders: [[$class: 'CulpritsRecipientProvider'],[$class: 'RequesterRecipientProvider']])
		}
        }
}
